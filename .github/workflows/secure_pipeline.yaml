name: DevSecOps Pipeline
on:
  push:
    branches: [ "allen" ]
env:
  AWS_REGION: us-west-2                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: jpetstore           # set this to your Amazon ECR repository name
  ECS_SERVICE: jpetstore-service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: jpetstore-cluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: aws/task_definition.json # set this to the path to your Amazon ECS task definition
  # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: sample-app           # set this to the name of the container in the
  AZURE_WEBAPP_NAME: app2727
  DEPLOYMENT_PLATFORM: aws # 1 for AWS, 2 for Azure, 3 for Google Cloud
  TARGET: https://securepipeline-ul7wfbu6fa-uc.a.run.app/jpetstore
  # http://ecsloadbalancer-1835225366.us-west-2.elb.amazonaws.com/jpetstore
  # https://app2727.azurewebsites.net/jpetstore/
jobs:
  # CodeQL-Build:
  #   name: codeQL test
  #   runs-on: ubuntu-latest
  #   permissions:
  #     security-events: write
  #     actions: read
  #     contents: read
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #     - name: Initialize CodeQL
  #       uses: github/codeql-action/init@v2
  #       with:
  #         language: javascript
  #     - name: Autobuild
  #       uses: github/codeql-action/autobuild@v2
  #     - name: Perform CodeQL Analysis
  #       uses: github/codeql-action/analyze@v2


  # GitGuardian:
  #   name: GitGuardian scan
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0 # fetch all history so multiple commits can be scanned
  #     - name: GitGuardian scan
  #       uses: GitGuardian/ggshield-action@master
  #       env:
  #         GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
  #         GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
  #         GITHUB_PULL_BASE_SHA:  ${{ github.event.pull_request.base.sha }}
  #         GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
  #         GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}



  # nuclei-scan:
  #   name: DAST Scan using Nuclei
  #   # needs: [zap_scan]
  #   runs-on: ubuntu-latest
  #   # needs: [upload_file]
  #   steps:
  #     - uses: actions/checkout@v3
  #     # - name: Run npm install
  #     #   run: npm install
  #     # Runs the ESlint code analysis
  #     - name: Run ESLint
  #       # eslint exits 1 if it finds anything to report
  #       run: node_modules/.bin/eslint build docs lib script spec-main -f node_modules/@microsoft/eslint-formatter-sarif/sarif.js -o results.sarif || true
  #     # Uploads results.sarif to GitHub repository using the upload-sarif action
  #     - uses: actions/checkout@v2
  #     - name: Nuclei - Vulnerability Scan
  #       uses: projectdiscovery/nuclei-action@main
  #       with:
  #         # templates: 'https://github.com/projectdiscovery/nuclei-templates/blob/74c4049363a703a44c72814d80db9050fa4ebb38/cnvd/2022/CNVD-2022-03672.yaml'
  #         target: 'https://app2727.azurewebsites.net/jpetstore'
  #         sarif-export: results.sarif
  #     - name: GitHub Security Dashboard Alerts update
  #       uses: github/codeql-action/upload-sarif@v2
  #       with:
  #         # sh: "-v"
  #         sarif_file: results.sarif
  #         # category: my-analysis-tool
  #     - name: GitHub Workflow artifacts
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: nuclei.log
  #         path: nuclei.log


  #https://github.com/ShiftLeftSecurity/scan-action/blob/master/README.md
  # shift-left:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Perform Scan
  #       uses: ShiftLeftSecurity/scan-action@master
  #       with:
  #         type: "credscan,python"
  #       env:
  #         WORKSPACE: https://github.com/${{ github.repository }}/blob/${{ github.sha }}
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - uses: actions/upload-artifact@v1
  #       with:
  #         name: reports
  #         path: reports




#https://github.com/renovatebot/github-action need to create token on github
  # token key value (api key) needs to be put into environmental variable
  # create github token for renovate
  # renovate:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3.3.0
  #     - name: Self-hosted Renovate
  #       uses: renovatebot/github-action@v36.0.0
  #       with:
  #         renovate-version: 35.0.0
  #         token: ${{ vars.RENOVATE_TOKEN }}






# https://github.com/fossas/fossa-action fossa still need to register for token
# https://app.fossa.com/account/settings/integrations/github
# need to import the project in fossa website & grand app access from github setting
  fossa-scan:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: fossa scan
        uses: fossas/fossa-action@main # Use a specific version if locking is preferred
        with:
          api-key: ${{secrets.FOSSAAPIKEY}}
          run-tests: true






  # Fortify-SAST:
  #   # Use the appropriate runner for building your source code
  #   runs-on: ubuntu-latest 

  #   steps:
  #     # Check out source code
  #     - name: Check Out Source Code
  #       uses: actions/checkout@v2
  #       with:
  #         # Fetch at least the immediate parents so that if this is a pull request then we can checkout the head.
  #         fetch-depth: 2
  #     # If this run was triggered by a pull request event, then checkout the head of the pull request instead of the merge commit.
  #     - run: git checkout HEAD^2
  #       if: ${{ github.event_name == 'pull_request' }} 

  #     # Java is required to run ScanCentral Client, and may be required for your build
  #     # Java version to use depends on the Java version required to run your build (if any),
  #     # and the Java version supported by the ScanCentral Client version that you are running
  #     - name: Setup Java
  #       uses: actions/setup-java@v1
  #       with:
  #         java-version: 11

  #     ### Set up Fortify ScanCentral Client ###
  #     - name: Download Fortify ScanCentral Client
  #       uses: fortify/gha-setup-scancentral-client@v1   
  #       with:
  #         version: 21.2.0                                      # On-prem customers should specify a client version that matches their ScanCentral environment
  #                                                              # FoD customers usually should not specify a version but rather rely on the default version
  #         client-auth-token: ${{ secrets.CLIENT_AUTH_TOKEN }}  # Optional, but required if ScanCentral Controller requires client authentication

  #     ### Run Fortify ScanCentral Client ###
  #     # Update BUILD_OPTS based on the ScanCentral Client documentation and your project's included tech stack(s).
  #     #   ScanCentral Client will download dependencies for maven, gradle and msbuild projects.
  #     #   For other build tools, add your build commands to the workflow to download necessary dependencies and prepare according to Fortify SCA documentation.
  #     - name: Perform SAST Scan
  #       run: scancentral -url ${SC_CONTROLLER_URL} start $BUILD_OPTS -upload -application $APPLICATION -version $VERSION -uptoken $SSC_UPLOAD_TOKEN
  #       env:                                            
  #         SC_CONTROLLER_URL: ${{ secrets.SC_CONTROLLER_URL }}
  #         SSC_UPLOAD_TOKEN: ${{ secrets.SSC_UPLOAD_TOKEN }}
  #         APPLICATION: "My Application"
  #         VERSION: "1.0"
  #         BUILD_OPTS: "-bt mvn"

  #     ### Archive ScanCentral Client logs on failure ###
  #     - name: Save ScanCentral Logs
  #       uses: actions/upload-artifact@v2                
  #       if: failure()
  #       with:
  #          name: scancentral-logs
  #          path: ~/.fortify/scancentral/log










































  # sonar:
  #   name: Inspect - Using Sonar
  #   runs-on: ubuntu-latest

  #    needs: [ test ]

  #     steps:
  #       - name: Check out the code
  #         uses: actions/checkout@v1
  #         with:
  #           fetch-depth: 0
  #       - name: Set up JDK 11
  #         uses: actions/setup-java@v1
  #         with:
  #           java-version: 11
  #       - name: Cache SonarCloud packages
  #         uses: actions/cache@v1
  #         with:
  #           path: ~/.sonar/cache
  #           key: ${{ runner.os }}-sonar
  #           restore-keys: ${{ runner.os }}-sonar
  #       - name: Cache Maven packages
  #         uses: actions/cache@v1
  #         with:
  #           path: ~/.m2
  #           key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
  #           restore-keys: ${{ runner.os }}-m2
  #       - name: Build and analyze
  #         env:
  #           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         run: mvn -B verify -DexcludedGroups="Smoke | Staging | LamdaTest | BrowserStack" org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.issuesReport.html.enable=true -Dsonar.projectKey=cl456852_jpetstore-6
  # #      - name: SonarQube Quality Gate check
  # #        uses: sonarsource/sonarqube-quality-gate-action@master
  # #        env:
  # #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # #          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  # #        timeout-minutes: 5
  # #        with:
  # #          scanMetadataReportFile: target/sonar/report-task.txt


  #   gitleaks:
  #     name: Secret Scan using Gitleaks
  #     runs-on: ubuntu-latest
  #     steps:
  #       - uses: actions/checkout@v3
  #         with:
  #           fetch-depth: 0
  #       - uses: gitleaks/gitleaks-action@v2
  #         env:
  #           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  #
  #CodeQL test - Shaolun
#   CodeQL-Build:
#     name: codeQL test
#     runs-on: ubuntu-latest
#     permissions:
#       security-events: write
#       actions: read
#       contents: read
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3
#       - name: Initialize CodeQL
#         uses: github/codeql-action/init@v2
#         with:
#           language: javascript
#       - name: Autobuild
#         uses: github/codeql-action/autobuild@v2
#       - name: Perform CodeQL Analysis
#         uses: github/codeql-action/analyze@v2

# #GitGuardian Test - Shaolun
  # GitGuardian:
  #     name: GitGuardian scan
  #     runs-on: ubuntu-latest
  #     steps:
  #       - name: Checkout
  #         uses: actions/checkout@v2
  #         with:
  #           fetch-depth: 0 # fetch all history so multiple commits can be scanned
  #       - name: GitGuardian scan
  #         uses: GitGuardian/ggshield-action@master
  #         with:
  #           args: -v --all-policies
  #         env:
  #           GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
  #           GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
  #           GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
  #           GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.allen }}
  #           # GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
  #           GITGUARDIAN_API_KEY: ${{ secrets.securepipeline_token }}
            

# #ShiftLeft Test - Shaolun
# #https://github.com/ShiftLeftSecurity/scan-action/blob/master/README.md
#   ShiftLeft:
#     name: Perform Scan
#     uses: ShiftLeftSecurity/scan-action@master
#     with:
#       type: "credscan,python"
#     env:
#       WORKSPACE: https://github.com/${{ github.repository }}/blob/${{ github.sha }}
#       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#   - uses: actions/upload-artifact@v1
#     with:
#       name: reports
#       path: reports


# #FOSSA Test - Shaolun 
# #https://github.com/fossas/fossa-action
#   fossa-scan:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - uses: fossas/fossa-action@main # Use a specific version if locking is preferred
#         with:
#           api-key: ${{secrets.fossaApiKey}}
#           run-tests: true

# #Renovate Test - Shaolun 
# #https://github.com/renovatebot/github-action
#   renovate:
#       runs-on: ubuntu-latest
#       steps:
#         - name: Checkout
#           uses: actions/checkout@v3.3.0
#         - name: Self-hosted Renovate
#           uses: renovatebot/github-action@v36.0.0
#           with:
#             renovate-version: 35.0.0
#             token: ${{ secrets.RENOVATE_TOKEN }}

# #Fortify Test - Shaolun 
# #

#   snykScan:
#     name: SCA Scan using Snyk
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v2
#         with:
#           fetch-depth: 0
#       - name: Set up Maven
#         run: mvn -N io.takari:maven:wrapper -Dmaven=3.8.2
#       - name: Run Snyk to check for vulnerabilities
#         continue-on-error: true
#         uses: snyk/actions/maven-3-jdk-11@master
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#         with:
#           args: --sarif-file-output=snyk.sarif
#       - name: Upload result to GitHub Code Scanning
#         uses: github/codeql-action/upload-sarif@v2
#         with:
#           sarif_file: snyk.sarif

#   semgrep:
#     permissions: write-all
#     name: SAST Scan using Semgrep
#     runs-on: ubuntu-latest

#     container:
#       image: returntocorp/semgrep

#     if: (github.actor != 'dependabot[bot]')

#     steps:
#       - uses: actions/checkout@v3
#       - run: semgrep ci --sarif --output=semgrep.sarif
#         env:
#            SEMGREP_RULES: p/default
#       - name: Upload SARIF file for GitHub Advanced Security Dashboard
#         uses: github/codeql-action/upload-sarif@v2
#         with:
#           sarif_file: semgrep.sarif
#         if: always()

#   deploy:
#     name: Deploy to AWS & Docker Scan using Trivy
#     runs-on: ubuntu-latest
#     environment: production
#     needs: [snykScan,gitleaks,GitGuardian,CodeQL-Build,sonar,semgrep]
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

#       - name: Build, tag, and push image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           # Build a docker container and
#           # push it to ECR so that it can
#           # be deployed to ECS.
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
#           echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

#       #      - name: Scan Docker image
#       #        id: docker-scan
#       #        uses: alexjurkiewicz/ecr-scan-image@v1.7.0
#       #        with:
#       #          repository: ${{ env.ECR_REPOSITORY }}
#       #          tag: ${{ steps.build-image.outputs.tag }}
#       #          fail_threshold: high

#       - name: Run Trivy vulnerability scanner
#         uses: aquasecurity/trivy-action@master
#         with:
#           image-ref: ${{ steps.build-image.outputs.image }}
#           format: 'sarif'
#           output: 'trivy-results.sarif'

#       - name: Upload Trivy scan results to GitHub Security tab
#         uses: github/codeql-action/upload-sarif@v2
#         with:
#           sarif_file: 'trivy-results.sarif'

#       - name: Fill in the new image ID in the Amazon ECS task definition
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
#         with:
#           task-definition: ${{ env.ECS_TASK_DEFINITION }}
#           container-name: ${{ env.CONTAINER_NAME }}
#           image: ${{ steps.build-image.outputs.image }}

#       - name: Deploy Amazon ECS task definition
#         uses: aws-actions/amazon-ecs-deploy-task-definition@3cc43061dd30ad47511af35bca46e2c1435b9035
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           service: ${{ env.ECS_SERVICE }}
#           cluster: ${{ env.ECS_CLUSTER }}
#           wait-for-service-stability: true


#   zap_scan:
#     runs-on: ubuntu-latest
#     name: DAST Scan using ZAP
#     needs: [deploy]
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#         with:
#           ref: master
#       - name: ZAP Scan
#         uses: zaproxy/action-baseline@v0.6.1
#         with:
#           token: ${{ secrets.GITHUB_TOKEN }}
#           docker_name: 'owasp/zap2docker-stable'
#           target: 'http://ecsloadbalancer-1600554619.us-west-2.elb.amazonaws.com/jpetstore/' # Change URL or IP of your target application
#           rules_file_name: '.zap/rules.tsv'
#           cmd_options: '-a'

#   nuclei-scan:
#     name: DAST Scan using Nuclei
#     needs: [zap_scan]
#     runs-on: ubuntu-latest
#     # needs: [upload_file]
#     steps:
#       - uses: actions/checkout@v3
#       # - name: Run npm install
#       #   run: npm install
#       # Runs the ESlint code analysis
#       - name: Run ESLint
#         # eslint exits 1 if it finds anything to report
#         run: node_modules/.bin/eslint build docs lib script spec-main -f node_modules/@microsoft/eslint-formatter-sarif/sarif.js -o results.sarif || true
#       # Uploads results.sarif to GitHub repository using the upload-sarif action

#       - uses: actions/checkout@v2

#       - name: Nuclei - Vulnerability Scan
#         uses: projectdiscovery/nuclei-action@main
#         with:
#           # templates: 'https://github.com/projectdiscovery/nuclei-templates/blob/74c4049363a703a44c72814d80db9050fa4ebb38/cnvd/2022/CNVD-2022-03672.yaml'
#           target: 'http://ecsloadbalancer-1600554619.us-west-2.elb.amazonaws.com/jpetstore'
#           sarif-export: results.sarif

#       - name: GitHub Security Dashboard Alerts update
#         uses: github/codeql-action/upload-sarif@v2
#         with:
#           # sh: "-v"
#           sarif_file: results.sarif
#           # category: my-analysis-tool

#       - name: GitHub Workflow artifacts
#         uses: actions/upload-artifact@v2
#         with:
#           name: nuclei.log
#           path: nuclei.log